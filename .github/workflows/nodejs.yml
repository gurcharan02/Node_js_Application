name: Node.js CI
on:
  push:
    branches: [ "master" ]
    
env:
  AWS_REGION: us-west-2                 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: my-node-app          # set this to your Amazon ECR repository name
  ECS_SERVICE: my-node-app                # set this to your Amazon ECS service name
  ECS_CLUSTER: my-node                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: node-app
  
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version
      - name: Install docker
        run: |
            sudo apt-get update -y
            sudo apt install docker.io -y 
            sudo usermod -aG docker $USER

  Installing_pm2_and_deploy_application:
   needs: [build]
   runs-on: self-hosted
   steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: PM2 installation & Verify
      run: |
        sudo npm install -g pm2
        pm2 --version || true
    - name: Stop existing PM2 processes
      run: |
        cd /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application
        pm2 delete all || true
    - name: Start application with PM2
      run: |
        cd /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application
        pm2 start index.js --name "my-node-app"
    - name: Check application status
      run: pm2 status
      
      
  Create_Docker_image:
   needs: [Installing_pm2_and_deploy_application]
   runs-on: self-hosted
   steps: 
     - name: Checkout code
       uses: actions/checkout@v3
     - name: build image
       run: |           
            sudo docker build /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application --tag my-node-app
     - name: check docker images
       run: |           
           docker images
           
  Pushing_Docker_image_in_jfrog:
   needs: Create_Docker_image
   runs-on: self-hosted
   steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Push Docker image
      run: |
        docker login -umohit@arintech.in -p ${{ secrets.DOCKER_PASSWORD }} arintech01.jfrog.io
        docker tag my-node-app:latest arintech01.jfrog.io/my-jfrog-repository/my-node-app:latest
        docker push arintech01.jfrog.io/my-jfrog-repository/my-node-app:latest   
        
  Configure_AWS:
   needs: [Create_Docker_image]
   runs-on: self-hosted
   steps:      
     - name: Configure AWS credentials
       run: |
          sudo apt install awscli -y
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-west-2  # Set your desired region
          
  Configure_ECS:
   needs: [Configure_AWS]
   runs-on: self-hosted
   steps:      
    
     - name: Create ECS Cluster
       run: |
          aws ecs create-cluster --cluster-name my-node
     - name: Create Task_Definition
       run: |
             aws ecs register-task-definition --cli-input-json file://.github/workflows/task-definition.json
             aws ecs list-task-definitions
             
     - name: Fetch Revision number of Task_Definition
       run: |
        latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision')
        echo $latest_revision
        echo "Latest revision: $latest_revision"
        
     - name: Check if ECS service exists
       id: check-service
       run: |
        service_name="my-node-service"
        existing_service=$(aws ecs describe-services --cluster my-node --services $service_name --query 'services[0].serviceName' --output text)
        echo "service_exists=$existing_service" >> $GITHUB_ENV
      
        
     - name: Create or update ECS service
       run: |
        if [[ "${{ env.service_exists }}" == "my-node-service" ]]; then
          echo "Service already exists. Performing update..."
          latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision')
          echo "Latest revision: $latest_revision"
          aws ecs update-service --cluster my-node --service my-node-service --desired-count 1 --task-definition node-app-deploy:$latest_revision
        else
          echo "Service does not exist. Creating new service..."
          latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision')
          echo "Latest revision: $latest_revision"
          aws ecs create-service --cluster my-node --service-name my-node-service --task-definition node-app-deploy:$latest_revision --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0ab5a9b7768b9b147],securityGroups=[sg-0c51e41191fbc4535],assignPublicIp=ENABLED}"
        fi
        
     - name: Wait for the service to stabilize
       run: |
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable --cluster my-node --services my-node-service

#      - name: Fetch_Revision_number_of_Task_Definition
#        run: |
#             aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision'
#             latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision')


#      - name: Check if ECS service exists
#        id: check-service
#        run: |
#           service_name="my-node-service"
#           existing_service=$(aws ecs describe-services --cluster my-node --services $service_name --query 'services[0].serviceName' --output text)
#           echo "::set-output name=service_exists::${{ steps.check-service.outputs.existence }}"

#      - name: Create or update ECS service
#        run: |
#         aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision'
#             latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy --query 'taskDefinition.revision')
#           if [[ "${{ steps.check-service.outputs.service_exists }}" == "my-node-service" ]]; then
#             echo "Service already exists. Performing update..."
#             aws ecs update-service --cluster my-node --service my-node-service --desired-count 1 --task-definition node-app-deploy:$latest_revision
#           else
#             echo "Service does not exist. Creating new service..."
#             aws ecs create-service --cluster my-node --service-name my-node-service --task-definition node-app-deploy:$latest_revision --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0ab5a9b7768b9b147],securityGroups=[sg-0c51e41191fbc4535],assignPublicIp=ENABLED}"
#             fi
    
    
     - name: Featch_Public_IP_Address
       run: |
        task_id=$(aws ecs list-tasks --cluster my-node --family node-app-deploy --query 'taskArns[0]' --output text | awk -F / '{print $NF}')
        task_arn=$(aws ecs describe-tasks --cluster my-node --tasks $task_id --query 'tasks[0].taskArn' --output text)
        eni_number=$(aws ecs describe-tasks --cluster my-node --tasks $task_arn --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        eni_id=$eni_number
        public_ip=$(aws ec2 describe-network-interfaces --network-interface-ids $eni_id --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo $public_ip
       
#      - name :
#          aws ecs describe-services --cluster my-node --services my-node-service
#           aws ecs update-service --cluster my-node --service my-node-service --task-definition node-app-deploy:$latest_revision --desired-count 1

#          aws ecs create-service --cluster my-node --service-name my-node-service --task-definition node-app-deploy:$latest_revision --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0ab5a9b7768b9b147],securityGroups=[sg-0c51e41191fbc4535],assignPublicIp=ENABLED}"
          
#      - name: Login to Amazon ECR
#        run: |
#           aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 340704870584.dkr.ecr.us-west-2.amazonaws.com
          
#      - name: Verify Docker Image and Tag  
#        run: |
#           docker images
#           docker tag my-node-app:latest 340704870584.dkr.ecr.us-west-2.amazonaws.com/my-node-app:latest
          
#      - name: Push Docker Image to ECR  
#        run: |
#           docker push 340704870584.dkr.ecr.us-west-2.amazonaws.com/my-node-app:latest
       
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#         task-definition: .github/workflows/task-definition.json
#         container-name: node-app
#         image: arintech01.jfrog.io/my-jfrog-repository/my-node-app:latest  
        
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         #service: ${{ env.ECS_SERVICE }}
#         cluster: my-node
#         wait-for-service-stability: true
          
